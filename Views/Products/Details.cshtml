@model ProductCommentApp.Models.Product
@{
    ViewData["Title"] = @Model.Name;
}

<h1>@Model.Name</h1>
<div class="row">
    <div class="col-md-6">
        <img src="@Url.Content("~/images/" + Model.Image)" class="img-fluid" alt="@Model.Name" />
    </div>
    <div class="col-md-6">
        <h4>Price: $@Model.Price</h4>
        <h4>Quantity: <span id="quantity">@Model.Quantity</span></h4>
        <button id="buyButton" class="btn btn-primary mt-2" onclick="buyProduct()">Buy</button>
    </div>
</div>

<h3>Comments</h3>
<ul id="commentsList">
    @foreach (var comment in Model.Comments)
    {
        <li><strong>@comment.Username</strong>: @comment.Text</li>
    }
</ul>

<h4>Add Comment</h4>
<div>
    <input type="text" id="username" class="form-control" placeholder="Your Name" />
    <textarea id="commentText" class="form-control" placeholder="Your Comment"></textarea>
    <button class="btn btn-success mt-2" onclick="sendComment()">Add Comment</button>
</div>

<div id="notification" class="alert alert-info" style="display:none;"></div>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/commentHub")
            .build();

        connection.start().then(() => {
            console.log("Connection started");
            connection.invoke("JoinProductGroup", @Model.Id);
        }).catch(err => console.error(err));

        connection.on("ReceiveComment", (username, text) => {
            $("#commentsList").append(`<li><strong>${username}</strong>: ${text}</li>`);
        });

        connection.on("ReceiveNotification", (username, productId) => {
            const message = productId == @Model.Id
                ? `${username} added a comment to this product!`
                : `${username} added a comment to Product ${productId}`;
            $("#notification").text(message);
            $("#notification").show();
            setTimeout(() => $("#notification").hide(), 5000);
        });

        connection.on("UpdateQuantity", (productId, newQuantity) => {
            if (productId == @Model.Id) {
                $("#quantity").text(newQuantity);
                if (newQuantity <= 0) {
                    $("#buyButton").prop("disabled", true).text("Out of Stock");
                }
            }
        });

        function sendComment() {
            const username = $("#username").val();
            const text = $("#commentText").val();
            if (username && text) {
                connection.invoke("SendComment", @Model.Id, username, text)
                    .catch(err => console.error(err));
                $("#commentText").val("");
            }
        }

        function buyProduct() {
            connection.invoke("BuyProduct", @Model.Id)
                .catch(err => console.error(err));
        }

        window.onbeforeunload = () => {
            connection.invoke("LeaveProductGroup", @Model.Id);
        };
    </script>
}